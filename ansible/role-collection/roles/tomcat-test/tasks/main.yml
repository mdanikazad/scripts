---

#- name: Ensure tomcat_java_home is defined
#  fail: msg="You must define the tomcat_java_home variable"
#  when: tomcat_java_home is not defined

- name: Create tomcat group
  group:
    name: "{{ tomcat_group }}"
    system: yes
  tags: [create_tomcat_group]

- name: Create tomcat user
  user:
    name: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    shell: /bin/false
    home: "{{tomcat_home_dir}}"
    system: yes
    createhome: no
  tags: [create_tomcat_user]

- name: Download Tomcat archive
  get_url: url={{ tomcat_url }} dest=/opt/{{ tomcat_package }}
  tags: [download_tomcat]

#- name: Create tomcat home directory
#  file:
#    path: "{{tomcat_home_path}}"
#    state: directory
#    group: tomcat
#    mode: 0755

- name: Extract tomcat archive
  command: chdir=/opt /bin/tar xvf /opt/{{ tomcat_package }} -C /opt creates=/opt/{{ tomcat_build_name }}
  tags: [extract_archive]

- name: Create tomcat app directory
  command: cp -r /opt/{{ tomcat_build_name }} {{tomcat_home_dir}}
  tags: [create_app_dir]

- name: Change ownership of app directory
  file:
    path: "{{tomcat_home_dir}}"
    mode: 0755
    group: "{{ tomcat_group }}"
    state: directory
    recurse: yes
  tags: [change_appdir_perm]

  #- name: Create and change tomcat directory permission
  #  copy:
  #    src: "tomcat_ur"
  #    dest: "{{tomcat_home_path}}"
  #    remote_src: yes
  #    group: tomcat
  #    mode: 0750
  #    directory_mode: yes
  #recurse: yes



#- name: Download and extract Tomcat to tomcat home directory
#  unarchive:
    #src: "{{ tomcat_archive_url}}/{{tomcat_archive_name}}{{tomcat_archive_name_ext }}"
    #src: "/opt/{{ tomcat_package }}"
#    src: "{{ tomcat_url }}"
#    dest: "{{ tomcat_home_path }}"
#    remote_src: yes
    #group: tomcat
    #mode: 0750
    #creates: "{{tomcat_archive_install_path}}"

- name: Make the tomcat user the owner of the webapps, work, temp, and logs directories
  file:
    #path: "{{tomcat_archive_install_path}}/{{item}}"
    path: "{{tomcat_home_dir}}/{{item}}"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    recurse: yes
  with_items:
    - webapps
    - work
    - temp
    - logs
  tags: [web_work_temp_logs_perm]

- name: Grant Tomcat group read access to the conf directory
  file:
    state: directory
    path: "{{tomcat_home_dir}}/conf"
    mode: "g+r"
    recurse: true
  tags: [conf_g+r_perm]

- name: Grant Tomcat group execute access to the conf directory itself
  file:
    path: "{{tomcat_home_dir}}/conf"
    state: directory
    mode: "g+x"
  tags: [conf_g+x_perm]

#- name: Grant Tomcat group access to the bin directory itself
#  file:
#    path: "{{tomcat_home_path}}/bin"
#    group: tomcat
#    state: directory
#    mode: "g+rwx"

- name: Create tomcat-users.xml
  template:
    src: tomcat-users.xml.j2
    dest: "{{tomcat_home_dir}}/conf/tomcat-users.xml"
  notify: restart tomcat
  tags: [apply_tomcat_user_role]

- name: Replace ip restriction of manager & host-manager role
  template:
    src: context.xml.j2
    dest: "{{ item }}"
  notify: restart tomcat
  with_items:
    - "{{tomcat_home_dir}}/webapps/host-manager/META-INF/context.xml"
    - "{{tomcat_home_dir}}/webapps/manager/META-INF/context.xml"
  tags: [remove_tomcat_role_ip_restriction]

#- name: Symlink Tomcat to current version
#    src: "/opt/{{ tomcat_build_name }}"
#    dest: "{{ tomcat_install_link }}"
#    state: link
#  notify: restart tomcat

- name: Create systemd service script for Tomcat
  template:
    src: "tomcat.service.j2"
    dest: "/etc/systemd/system/tomcat.service"
  notify:
    - reload systemd
    - restart tomcat
  tags: [systemd]

- name: Remove tomcat downloaded sourcecode
  file:
    state: absent
    path: "{{ item }}"
    #path: "/opt/{{ tomcat_package }} /opt/{{ tomcat_build_name }}"
    #path: "/opt/{{ tomcat_build_name }}"
  with_items:
    - "/opt/{{ tomcat_package }}"
    - "/opt/{{ tomcat_build_name }}"
  tags: [remove_artifact]
